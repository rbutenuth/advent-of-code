
(def list-of-strings (split (read-string-from-file input-file-name) "\\r?\\n" 0))

(def zero (char-at "0" 0))
(def one (char-at "1" 0))

(def bits-in-input (length (first list-of-strings)))

(def-function count-at-position (values position)
	(reduce
		(lambda (acc value index)
			(+
				acc
				(if-else (eq one (char-at value position))
					1
					0
				)
			)
		)
		0
		list-of-strings
	)
)

(def-function binary-to-integer (str)
	(if-else (eq 0 (length str))
		0
		(+
			(* 2 (binary-to-integer (substring str 0 (- (length str) 1))))
			(if-else (eq one (char-at str (- (length str) 1))) 1 0)
		)
	) 
)

(def-function compute-gamma-rate (values bits)
	(if-else (eq bits 0)
		""
		(join
			(compute-gamma-rate values (- bits 1))
			(if-else (gt (count-at-position values (- bits 1)) ( / (size values) 2)) "1" "0")
		)
	)
)


(def-function invert-bits-in-string (str)
	(if-else (eq 0 (length str))
		""
		(join
			(if-else (eq "1" (substring str 0 1))
				"0"
				"1"
			)
			(invert-bits-in-string (substring str 1 (length str)))
		)
	) 
)

(def gamma-rate-as-string (compute-gamma-rate list-of-strings bits-in-input)) 

(def gamma-rate (binary-to-integer gamma-rate-as-string))
(def epsilon-rate (binary-to-integer (invert-bits-in-string gamma-rate-as-string)))


(def
	result
	(* gamma-rate epsilon-rate)
)

