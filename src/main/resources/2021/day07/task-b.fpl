(def 
	crab-positions 
	(map
		(lambda (str index) (parse-number "#" "US" str)) 
		(split (read-string-from-file input-file-name) "," 0)
	)
)

(def-function abs (x)
	(if-else (gt x 0)
		x
		(- x)
	)
)

(def-function distance-to-cost (distance)
	(/ (* distance (+ distance 1)) 2)
)

(def-function cost (positions target)
	(reduce
		(lambda (acc position index)
			(+ acc (distance-to-cost (abs (- position target))))
		)
		0
		positions
	)
)

(def max-start-position
	(reduce
		(lambda (acc pos index)
			(if-else (gt pos acc)
				pos
				acc
			)
		)
		0
		crab-positions
	)
)

(def min-position 0)
(def cost-of-min-position (cost crab-positions 0))

(from-to
	(lambda (i)
		(def cost (cost crab-positions i))
		(if (lt cost cost-of-min-position)
			(sequential
				(set min-position i)
				(set cost-of-min-position cost)
			)
		)
	)
	0
	max-start-position
)

;(println "min-position: " min-position) ; 480
;(println "cost-of-min-position: " cost-of-min-position) ; 89647695

(def result cost-of-min-position)
