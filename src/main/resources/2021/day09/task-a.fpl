(def list-of-strings (split (read-string-from-file input-file-name) "\\r?\\n" 0))

(def cols (length (first list-of-strings)))
(def rows (size list-of-strings))


(def-function height (row col)
	(if-else (or (lt row 0) (ge row rows))
		10
		(if-else (or (lt col 0) (ge col cols))
			10
			(- (char-at (get-element list-of-strings row) col) (char-at "0" 0))
		)
	)
)

(def-function is-low-point (row col)
	(def h (height row col))
	(and
		(lt h (height (+ row 1) col))
		(lt h (height (- row 1) col))
		(lt h (height row (+ col 1)))
		(lt h (height row (- col 1)))
	)
)

(def low-points-and-nulls
	(map-sequence
		(lambda (row)
			(map-sequence
				(lambda (col)
					(if-else (is-low-point row col)
						(+ (height row col) 1)
						nil
					)
				)
				0
				cols
			)
		)
		0
		rows
	)
)

(def
	result
	(reduce
		(lambda (acc risk)
			(+ acc risk)
		)
		0
		(filter
			(lambda (x) x)
			(flat-map 
				(lambda (x) x)
				low-points-and-nulls
			)
		)
	)
)
