(def list-of-strings (split (read-string-from-file input-file-name) "\\r?\\n" 0))

(def-function is-start (cave)
	(eq cave "start")
)

(def-function is-end (cave)
	(eq cave "end")
)

(def-function is-big (cave)
	(eq cave (to-upper-case cave))
)

(def-function is-small (cave)
	(eq cave (to-lower-case cave))
)

(def-function add-to-map (m a b)
;	(println "a: " a ", b: " b)
	(put destinations (dict-get m a))
	(if-else destinations
		(dict-set m a (add-end destinations b))
		(dict-def m a (list b))
	)
)

(def cave-map (dict))
(for-each 
	(lambda (path index)
		(def a (first (split path "-" 0)))
		(def b (last (split path "-" 0)))
		(add-to-map cave-map a b)
		(add-to-map cave-map b a)
	)
	list-of-strings 
)

(def-function contains (values value)
	(reduce
		(lambda (acc element index)
			(or acc (eq value element))
		)
		0
		values
	)
)

(def-function extend-by-one-node (paths)
	(flat-map
		(lambda (path index)
			(map
				(lambda (cave index)
					(add-end path cave) 
				)
				(filter
					(lambda (cave index)
						(not
							(and
								(is-small cave)
								(contains path cave)
							)
						)
					)
					(dict-get cave-map (last path))
				)
			)
		)
		paths
	)
)

(def-function compute-next-front (paths)
	(append
		; keep all paths which already reach the end
		(filter
			(lambda (path index)
				(is-end (last path))
			)
			paths
		)
		; extend all paths which have *not* reached the end (filtered input to flat-map)
		(extend-by-one-node
			(filter
				(lambda (path index)
					(not (is-end (last path)))
				)
				paths
			)
		)
	)
)

(def-function all-at-end (paths)
	(reduce
		(lambda (acc path index)
			(and acc (is-end (last path)))
		)
		1
		paths
	)
)

;(println cave-map)
 
(def paths '(("start")))
(while (not (all-at-end paths))
	(set paths (compute-next-front paths))

;	(for-each
;		(lambda (path index)
;			(println path)
;		)
;		paths
;	)
)

(def result (size paths))


