(def list-of-strings (split (read-string-from-file input-file-name) "\\r?\\n" 0))

(def num-rows (size list-of-strings))
(def num-cols (length (first list-of-strings)))

; UTF-8 code of "0"
(def zero (char-at "0" 0))

(def multiplier 5)

(def-function wrapped-value (original-value tile-row tile-column)
	(+ (% (+ (- original-value 1) tile-row tile-column) 9) 1)
)

(def risk-dict (dict))
(from-to
	(lambda (row-num)
		(def row-as-list (to-chars (get-element list-of-strings row-num)))
		(from-to
			(lambda (col-num)
				(def value (- (get-element row-as-list col-num) zero))
				(from-to
					(lambda (row-mult)
						(from-to
							(lambda (col-mult)
								(def row (+ row-num (* row-mult num-rows)))
								(def col (+ col-num (* col-mult num-cols)))
								(dict-def risk-dict (join row "-" col) (wrapped-value value row-mult col-mult))
							)
						0
						multiplier
						)
					)
					0
					multiplier
				)
			)
			0
			num-cols
		)
	)
	0
	num-rows
)

(set num-rows (* multiplier num-rows))
(set num-cols (* multiplier num-cols))

(def-function print-risk-dict ()
	(from-to
		(lambda (row)
			(from-to
				(lambda (col)
					(print (dict-get risk-dict (join row "-" col)))
				)
				0
				num-cols
			)
			(println)
		)
		0
		num-rows
	)
)

(def neighbors '(
				(-1 0)
		(0 -1)			(0 1)
				(1 0)
	)
)

; key: "row-col"
(def reached-dict (dict))
(dict-def reached-dict "0-0" 1)
(def node-to-risk-dict (dict))
(dict-def node-to-risk-dict "0-0" 0)

; Key: cost (6 digits), "|", "row-col", value: "row-col"
(def next-dict (sorted-dict nil "000000|0-0" "0-0"))


(def-function print-reached-map ()
	(from-to
		(lambda (row-num)
			(from-to
				(lambda (col-num)
					(print
						(if-else (dict-get reached-dict (join row-num "-" col-num))
							"*"
							"."
						) 
					)
				)
				0
				num-cols
			)
			(println)
		)
		0
		num-rows
	)
)

; return a string "row-col" and remove it from dict
(def-function fetch-lowest-risk ()
	(dict-fetch-first-value next-dict)
)

(def-function add-to-next-list (key cost)
	; six digits, so that string sorting matches number sorting
	; (we could have provided a sort lambda instead)
	(dict-put 
		next-dict 
		(join (format-number "000000" "US" cost) "|" key) 
		key
	) 
)

(def-function key-to-row (key)
	(parse-number "#" "US" (first (split key "-" 0)))
)

(def-function key-to-col (key)
	(parse-number "#" "US" (last (split key "-" 0)))
)

(def-function expand-lowest-risk-node ()
	(def lowest-key (fetch-lowest-risk))

	(def lowest-cost (dict-get node-to-risk-dict lowest-key))
	(def lowest-key-row (key-to-row lowest-key))
	(def lowest-key-col (key-to-col lowest-key))
	(for-each
		(lambda (d-list index)
			(def new-row (+ lowest-key-row (first d-list)))
			(def new-col (+ lowest-key-col (last d-list)))
			(def new-key (join new-row "-" new-col)) 
			(if (and
					(ge new-row 0) (lt new-row num-rows)
					(ge new-col 0) (lt new-col num-cols)
					(not (dict-get reached-dict new-key)) 
				)
				(sequential
					(dict-def reached-dict new-key 1)
					(def new-cost (+ lowest-cost (dict-get risk-dict new-key)))
					(dict-def node-to-risk-dict new-key new-cost)
					(add-to-next-list new-key new-cost)
				)
			)
		)
		neighbors
	)
)

(def-function compute-lowest-risk (row col)
	(while (eq nil (dict-get node-to-risk-dict (join row "-" col)))
		(expand-lowest-risk-node)
	)
	(dict-get node-to-risk-dict (join row "-" col))
)

(def result (compute-lowest-risk (- num-rows 1) (- num-cols 1)))

; 462, about 60s when optimization level is like task-a.fpl

; 2846, about 17s
