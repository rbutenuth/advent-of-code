(def input (read-string-from-file "src/main/resources/2021/day16/task-input.txt"))

(println "input:" input)

; "8A004A801A8002F478" -> 16
; "620080001611562C8802118E34" -> 12
; "C0015000016115A2E0802F182340" -> 23
; "A0016C880162017C3686B18A3D4780" -> 31

;(def input "A0016C880162017C3686B18A3D4780")
 
(def bit-dict (dict
	"0" '(0 0 0 0)
	"1" '(0 0 0 1)
	"2" '(0 0 1 0)
	"3" '(0 0 1 1)
	"4" '(0 1 0 0)
	"5" '(0 1 0 1)
	"6" '(0 1 1 0)
	"7" '(0 1 1 1)
	"8" '(1 0 0 0)
	"9" '(1 0 0 1)
	"A" '(1 0 1 0)
	"B" '(1 0 1 1)
	"C" '(1 1 0 0)
	"D" '(1 1 0 1)
	"E" '(1 1 1 0)
	"F" '(1 1 1 1)
	)
)

(def-function string-to-bit-list (str)
	(flat-map
		(lambda (utf)
			(dict-get bit-dict (from-char utf))
		)
	 	(to-chars str)
	 )
)

(def bits (string-to-bit-list input))
(def pos 0)

(println "number of bits:" (size bits))

(def-function bits-as-number (start count)
	(def value 0)
	(def i 0)
	(while (lt i count)
		(set value 
			(+ (* value 2) (get-element bits (+ start i)))
		)
		(set i (+ i 1))
	)
	value
)



(def-function read-literal-number ()
	(def number 0)
	(while (eq 1 (get-element bits pos))
		(set pos (+ pos 1))
		(set number (+ (* number 16) (bits-as-number pos 4))) 
		(set pos (+ pos 4))
	)
	(set pos (+ pos 1))
	(set number (+ (* number 16) (bits-as-number pos 4)))
	(set pos (+ pos 4))
	number		
)

(def-function read-packet ()
	(println "read-packet, pos:" pos)
	(def version (bits-as-number pos 3))
	(set version-number-sum (+ version version-number-sum))
	(set pos (+ pos 3))
	(def type-id (bits-as-number pos 3))
	(set pos (+ pos 3))
	(cond
		(eq type-id 4) (sequential
			(def literal-number (read-literal-number))
;			(println "literal-number: " literal-number)
		)
		; any other type-id is an operator
		(read-operator version type-id) 
	)
)

(def-function read-sub-packets-by-bits ()
	(def number-of-bits (bits-as-number pos 15))
	(set pos (+ pos 15))
	(println "number of bits to read: " number-of-bits)
	(def end-pos (+ pos number-of-bits))
	(while (lt pos end-pos)
		(read-packet)
	)
)

(def-function read-sub-packets-by-count ()
	(def packets-to-read (bits-as-number pos 11))
	(set pos (+ pos 11))
	(println "packets to read: " packets-to-read)
	(def count 0)
	(while (lt count packets-to-read)
		(read-packet)
		(set count (+ count 1))
	)
)

(def-function read-operator (version packet-id)
	(println "read-operator, version:" version ", packed-id:" packet-id)
	(def next-bit (get-element bits pos))
	(set pos (+ pos 1))
	(if-else next-bit
		(read-sub-packets-by-count)
		(read-sub-packets-by-bits)
	)
)

(def version-number-sum 0)
(read-packet)
(println "sum:" version-number-sum) ; 947

