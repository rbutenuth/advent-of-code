
; test-values:
;(def target-min-x 20)
;(def target-max-x 30)
;(def target-min-y -10)
;(def target-max-y -5)

; task-values:
(def target-min-x 57)
(def target-max-x 116)
(def target-min-y -198)
(def target-max-y -148)


(def-function adjust-vx (old-x)
	(cond
		(eq old-x 0) 0
		(gt old-x 0) (- old-x 1)
		(lt old-x 0) (+ old-x 1)
	)
)

(def-function adjust-vy (old-y)
	(+ old-y 1)
)

(def max-initial-vy (+ 1 (- target-min-y)))
(def max-steps (+ (* 2 max-initial-vy) 1))

(println "max-initial-vy:" max-initial-vy ", max-steps:" max-steps)

(def-function hits-target-x-steps (initial-vx)
	(def x 0)
	(def vx initial-vx)
	(def hit-steps '())
	(def count 0)
	(while (and (le count max-steps) (le x target-max-x))
		(if (and (ge x target-min-x) (le x target-max-x))
			(set hit-steps (add-end hit-steps count))
		)
		(set x (+ x vx))
		(set vx (adjust-vx vx))
		(set count (+ count 1))
	)
	hit-steps
)

(def initial-vx-and-steps-hitting-x
	(filter
		(lambda (lst)
			(last lst)
		)
		(map-sequence
			(lambda (initial-vx)
				(list initial-vx (hits-target-x-steps initial-vx))
			)
			1
			(+ target-max-x 1) 
		)
	)
)


(def-function y-after-steps (initial-vy steps)
		(- (* initial-vy steps) 
		   (/ (* steps (- steps 1)) 2)
		)
	)

(def-function hits-target-y (initial-vy steps)
	(def y (y-after-steps initial-vy steps))
	(and (ge y target-min-y) (le y target-max-y))
)

(def steps-and-initial-vy-hitting-y
	(map-to-dict
		(lambda (steps-initial-vy) ; key-lambda
			(first steps-initial-vy)	
		)
		(lambda (old steps-initial-vy) ; value-lambda
			(last steps-initial-vy)
		)
		(filter
			(lambda (list-dict-pair)
				(gt (dict-size (last list-dict-pair)) 0)
			)
			(map-sequence 
				(lambda (steps)
					(def hit-vy-dict (dict))
					(from-to
						(lambda (initial-vy)
							(if (hits-target-y initial-vy steps)
								(dict-def hit-vy-dict initial-vy initial-vy)
							)
						)
						target-min-y
						max-initial-vy
					)
					(list steps hit-vy-dict)
				)
				0
				max-steps
			)
		)
	)
)

(def-function initial-vy-list-for-steps (steps)
	(def result
		(if-else (dict-get steps-and-initial-vy-hitting-y steps)
			(dict-values (dict-get steps-and-initial-vy-hitting-y steps))
			'()
		)
	)
;	(println "steps: " steps "-> vy" result)
	result
)

(def vx-list-of-vy 
	(map
		(lambda (initial-vx-list-of-steps)
			(def vx (first initial-vx-list-of-steps))
			(def vy-for-vx (dict))
			(for-each
				(lambda (steps)
					(for-each
						(lambda (vy)
							(dict-put vy-for-vx vy vy) 
						)
						(initial-vy-list-for-steps steps)
					)
				)
				(last initial-vx-list-of-steps) 
			)
			(list vx (dict-values vy-for-vx))
		)
		initial-vx-and-steps-hitting-x
	)
)

(def
	result
	(reduce
		(lambda (acc list-of-vx-to-vy)
;			(println "vx: " (first list-of-vx-to-vy) ", size:" (size (last list-of-vx-to-vy)))
			(+ acc (size (last list-of-vx-to-vy)))
		)
		0
		vx-list-of-vy
	)
)